 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/thoughts", type: :request do
  # Thought. As you add validations to Thought, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {  "title" => "test",
      "contents" => "test content", 
      "publish_date(1i)"=>"2021", 
      "publish_date(2i)"=>"1", 
      "publish_date(3i)"=>"20", 
      "read_time" => "10"
    }
  }

  # Title is required but missing from the params below
  let(:invalid_attributes) {
    {  
      "contents" => "invalid test", 
      "publish_date(1i)"=>"2021", 
      "publish_date(2i)"=>"1", 
      "publish_date(3i)"=>"20", 
      "read_time" => "10"
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Thought.create! valid_attributes
      get thoughts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      thought = Thought.create! valid_attributes
      get thought_url(thought)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    before { login_as_user }
    it "renders a successful response" do
      get new_thought_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    before { login_as_user }
    it "render a successful response" do
      thought = Thought.create! valid_attributes
      get edit_thought_url(thought)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    before { login_as_user }
    context "with valid parameters" do
      it "creates a new Thought" do
        expect {
          post thoughts_url, params: { thought: valid_attributes }
        }.to change(Thought, :count).by(1)
      end

      it "redirects to the created thought" do
        post thoughts_url, params: { thought: valid_attributes }
        expect(response).to redirect_to(thought_url(Thought.last))
      end
    end

    context "with invalid parameters" do
      before { login_as_user }
      it "does not create a new Thought" do
        expect {
          post thoughts_url, params: { thought: invalid_attributes }
        }.to change(Thought, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post thoughts_url, params: { thought: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    before { login_as_user }
    context "with valid parameters" do
      let(:new_attributes) {
        { "title" => "new test title", "contents" => "test content" }
      }

      it "updates the requested thought" do
        thought = Thought.create! valid_attributes
        patch thought_url(thought), params: { thought: new_attributes }
        thought.reload
        expect(thought.title).to eq new_attributes["title"]
      end

      it "redirects to the thought" do
        thought = Thought.create! valid_attributes
        patch thought_url(thought), params: { thought: new_attributes }
        thought.reload
        expect(response).to redirect_to(thought_url(thought))
      end
    end

    context "with invalid parameters" do
      let(:new_invalid_attributes) {
        { "title" => "a", "contents" => "test content" }
      }

      it "renders a successful response (i.e. to display the 'edit' template)" do
        thought = Thought.create! valid_attributes
        patch thought_url(thought), params: { thought: new_invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    before { login_as_user }
    it "destroys the requested thought" do
      thought = Thought.create! valid_attributes
      expect {
        delete thought_url(thought)
      }.to change(Thought, :count).by(-1)
    end

    it "redirects to the thoughts list" do
      thought = Thought.create! valid_attributes
      delete thought_url(thought)
      expect(response).to redirect_to(thoughts_url)
    end
  end
end
